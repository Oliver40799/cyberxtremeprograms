document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('.refund-form');
    const formMessage = document.getElementById('formMessage');

    form.addEventListener('submit', function(event) {
        // ValidaciÃ³n simple: verificar que los campos crÃ­ticos no estÃ©n vacÃ­os.
        const orderNumber = document.getElementById('orderNumber').value;
        const email = document.getElementById('email').value;
        const refundReason = document.getElementById('refundReason').value;

        // Comprobamos si los campos requeridos estÃ¡n llenos (ademÃ¡s de la validaciÃ³n 'required' de HTML)
        if (orderNumber.trim() === '' || email.trim() === '' || refundReason.trim() === '') {
             event.preventDefault(); // Si hay error, detenemos el envÃ­o.
             showMessage('ðŸ›‘ Por favor, complete todos los campos obligatorios para enviar su solicitud.', 'error');
            return;
        }

        // Si la validaciÃ³n en JS es exitosa, NO llamamos a event.preventDefault(),
        // permitiendo que el formulario se envÃ­e a Formsubmit (URL en el action del HTML).
        
        // Ocultamos el mensaje de error si existÃ­a y mostramos un mensaje temporal de "Enviando"
        // (Aunque Formsubmit redireccionarÃ¡ a la pÃ¡gina de "Gracias")
        showMessage('ðŸš€ Enviando su solicitud...', 'success');
        
        // El envÃ­o real a tu correo se realiza ahora por Formsubmit.
    });

    /**
     * Muestra un mensaje de feedback al usuario
     * @param {string} message - El mensaje a mostrar.
     * @param {string} type - 'success' o 'error' para aplicar estilos.
     */
    function showMessage(message, type) {
        formMessage.textContent = message;
        formMessage.className = 'form-message ' + type;
        formMessage.style.display = 'block';

        // Ocultar el mensaje despuÃ©s de 5 segundos
        setTimeout(() => {
            formMessage.style.display = 'none';
        }, 5000); 
    }
});